# -*- coding: utf-8 -*-
"""smart_garden_fuzzy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EJKOqA1M53DeY3n45JLOm1mdNVYQnQhY
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import skfuzzy as fuzz
import matplotlib.pyplot as plt
from skfuzzy import control as ctrl

temperature = ctrl.Antecedent(np.arange(0, 41, 1), 'temperature')
humidity = ctrl.Antecedent(np.arange(0, 100, 1), 'humidity')
light = ctrl.Antecedent(np.arange(0, 1000, 1), 'light')

survivability = ctrl.Consequent(np.arange(0, 90, 1), 'survivability')

temperature['cold'] = fuzz.zmf(temperature.universe, 0, 17)
temperature['warm'] = fuzz.trimf(temperature.universe, [13, 28, 34])
temperature['hot'] = fuzz.trimf(temperature.universe, [30, 40, 41])

humidity['wet'] = fuzz.trimf(humidity.universe, [65, 100, 100])
humidity['moist'] = fuzz.trimf(humidity.universe, [15, 50, 70])
humidity['dry'] = fuzz.zmf(humidity.universe, 0, 20)

light['low'] = fuzz.zmf(light.universe, 0, 300)
light['good'] = fuzz.trimf(light.universe, [250, 650, 900])
light['high'] = fuzz.trimf(light.universe, [800, 1000, 1000])

survivability['very low'] = fuzz.trimf(survivability.universe, [0, 0, 15])
survivability['low'] = fuzz.trimf(survivability.universe, [15, 20, 30])
survivability['pretty'] = fuzz.trimf(survivability.universe, [30, 35, 45])
survivability['good'] = fuzz.trimf(survivability.universe, [45, 55, 75])
survivability['high'] = fuzz.trimf(survivability.universe, [75, 90, 90])

rule1 = ctrl.Rule(humidity['wet'] & light['low'] & temperature['cold'], survivability['very low'])
rule2 = ctrl.Rule(humidity['wet'] & light['low'] & (temperature['warm'] | temperature['hot']), survivability['low'])
rule3 = ctrl.Rule(humidity['wet'] & light['good'] & (temperature['cold'] | temperature['hot']), survivability['pretty'])
rule4 = ctrl.Rule(humidity['wet'] & light['good'] & temperature['warm'], survivability['good'])
rule5 = ctrl.Rule(humidity['wet'] & light['high'] & temperature['cold'], survivability['pretty'])
rule6 = ctrl.Rule(humidity['wet'] & light['high'] & (temperature['warm'] | temperature['hot']), survivability['good'])

rule7 = ctrl.Rule(humidity['moist'] & light['low'] & temperature['cold'], survivability['low'])
rule8 = ctrl.Rule(humidity['moist'] & light['low'] & (temperature['warm'] | temperature['hot']), survivability['pretty'])
rule9 = ctrl.Rule(humidity['moist'] & light['good'] & temperature['cold'], survivability['pretty'])

rule10 = ctrl.Rule(humidity['moist'] & light['good'] & (temperature['warm'] | temperature['hot']), survivability['high'])
rule11 = ctrl.Rule(humidity['moist'] & light['high'] & temperature['cold'], survivability['good'])
rule12 = ctrl.Rule(humidity['moist'] & light['high'] & (temperature['warm'] | temperature['hot']), survivability['high'])

rule13 = ctrl.Rule(humidity['dry'] & light['low'] & temperature['cold'], survivability['very low'])
rule14 = ctrl.Rule(humidity['dry'] & light['low'] & (temperature['warm'] | temperature['hot']), survivability['very low'])
rule15 = ctrl.Rule(humidity['dry'] & light['good'] & (temperature['cold'] | temperature['hot']), survivability['very low'])
rule16 = ctrl.Rule(humidity['dry'] & light['good'] & temperature['warm'], survivability['low'])
rule17 = ctrl.Rule(humidity['dry'] & light['high'] & (temperature['cold'] | temperature['hot']), survivability['very low'])
rule18 = ctrl.Rule(humidity['dry'] & light['high'] & temperature['warm'], survivability['low'])

survivability_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9,
rule10, rule11, rule12, rule13, rule14, rule15, rule16, rule17, rule18])

guess = ctrl.ControlSystemSimulation(survivability_ctrl)

try :
    print("(0-41 C) Temperature of the environment: ")
    getTemp = int(input(""))
    guess.input['temperature'] = getTemp
    
    print("(0-100 %) Moisture of the soil: ")
    getHum = int(input(""))
    guess.input['humidity'] = getHum
    
    print("(0-1000) Light level of the environment: ")
    getLight = int(input(""))
    guess.input['light'] = getLight
    
except(IOError, OSError, ValueError) as err :
    print("Error : " + err)

guess.compute()

if getTemp <= 10 | getHum <= 10 | getLight <= 10:
    guess.output['survivability'] = 'lower than 10'
    print("\nSurvival chance for this environment is " + str(guess.output['survivability']) + "%")
elif getTemp >= 41:
    guess.output['survivability'] = 'lower than 10'
    print("\nSurvival chance for this environment is " + str(guess.output['survivability']) + "%")
else:
    print("\nSurvival chance for this environment is " + str(guess.output['survivability']) + "%")

survivability.view(sim = guess)
temperature.view(sim = guess)
humidity.view(sim = guess)
light.view(sim = guess)