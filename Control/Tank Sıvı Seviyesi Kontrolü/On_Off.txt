#include <stdio.h>
#include <stdlib.h>
#include <math.h>
/*pid and plant constants can be changed in the respective functions, lines 58-62 and 82-84*/
 
int simulate();
double on_off(double e);
double plant(double c);
 
int main(void)
{    int n = simulate();
     printf("%d adimda simule edildi\n", n);
     return 0;
}
 int simulate()
{    int BUF = 128;      //line buffer
    char line[BUF];
    int n = 0;
     //open the setpointvalues.txt file and an output file to write to
    FILE *in = fopen("setpointvalues.txt", "r");
    FILE *out = fopen("on_off_out.txt", "w");
	    if (in == NULL)
	    { printf("okunacak set degeri dosyasi yok\n");
	        fclose(out);
	        return 0;  }
    //read line by line and compute the controlled output
	    while (fgets(line, BUF, in)) 
		{  double sp;
	       	 sscanf(line, "%lf", &sp);
	              static double y = 0;
	             double e = sp;    
		 y= on_off(e);  
	             fprintf(out, "%f\n", y);   
	        n++;
	    }
    printf("on_off_out.txt dosyasi olusturuldu.\n");
    fclose(in);
    fclose(out);
     return n;
}

 
//compute the controller output
//in: current error e
//return: control output c
double on_off(double e)
{
const double tol = 0.4; // tolerans de?eri
static double sayi;
static double cikis;

    if(sayi>=(e+tol))
		{cikis = 1;}
	else if(sayi<=(e-tol))
		{cikis = 0;}	  
	if(cikis==0)
		{sayi=sayi+0.2;}
	else if(cikis==1)
		{sayi=sayi-0.2;}
return sayi;  
}

 
//compute the plant output
//in: control output c
//return: plant output y
double plant(double c)
{
    const double k = 2.0;
    const double t = 3.0;
    const double h = 0.1;
 
    static double cd = 0;   //c(k-1)
    static double yd = 0;   //y(k-1)
 
    //differential equation for current y, derived from the given TF
    double y = exp(-(1 / t) * h) * yd + (k - k * exp(-(1 / t) * h)) * cd;
 
    cd = c;
    yd = y;
 
    return y;
}